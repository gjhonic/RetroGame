<?php

namespace App\Command;

use App\Entity\GameShop;
use App\Entity\GameShopPriceHistory;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Contracts\HttpClient\HttpClientInterface;

#[AsCommand(
    name: 'app:steam-update-prices',
    description: 'Fetches current prices from Steam and saves them to price history',
)]
class SteamUpdatePricesCommand extends Command
{
    private EntityManagerInterface $entityManager;
    private HttpClientInterface $httpClient;

    public function __construct(EntityManagerInterface $entityManager, HttpClientInterface $httpClient)
    {
        parent::__construct();
        $this->entityManager = $entityManager;
        $this->httpClient = $httpClient;
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $now = new \DateTime();
        $output->writeln('üìÖ ' . $now->format('Y-m-d H:i:s'));
        $output->writeln('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω Steam...');

        $steamGames = $this->entityManager
            ->getRepository(GameShop::class)
            ->createQueryBuilder('gs')
            ->where('gs.shop = :shop')
            ->andWhere('gs.shouldImportPrice = true')
            ->setParameter('shop', 1)
            ->getQuery()
            ->getResult();

        $total = count($steamGames);
        $output->writeln("üîç –ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {$total}");

        $updated = 0;
        $checked = 0;

        foreach ($steamGames as $index => $gameShop) {
            if ($checked >= 150) {
                $output->writeln('‚õî –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 150 –∏–≥—Ä. –ó–∞–≤–µ—Ä—à–∞–µ–º.');
                break;
            }

            $game = $gameShop->getGame();

            if ($game && $game->isFree()) {
                $output->writeln(
                    "‚è© [{$gameShop->getLinkGameId()}] {$gameShop->getName()} ‚Äî –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∏–≥—Ä–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º."
                );
                continue;
            }

            $startOfDay = (new \DateTime())->setTime(0, 0, 0);
            $endOfDay = (new \DateTime())->setTime(23, 59, 59);

            $existing = $this->entityManager
                ->getRepository(GameShopPriceHistory::class)
                ->createQueryBuilder('h')
                ->select('COUNT(h.id)')
                ->where('h.gameShop = :gameShop')
                ->andWhere('h.updatedAt >= :startOfDay')
                ->andWhere('h.updatedAt <= :endOfDay')
                ->setParameter('gameShop', $gameShop)
                ->setParameter('startOfDay', $startOfDay)
                ->setParameter('endOfDay', $endOfDay)
                ->getQuery()
                ->getSingleScalarResult();

            if ($existing > 0) {
                $output->writeln(
                    "üîÅ [{$gameShop->getLinkGameId()}] {$gameShop->getName()} ‚Äî –¶–µ–Ω–∞ —É–∂–µ –µ—Å—Ç—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º."
                );
                continue;
            }

            $appid = $gameShop->getLinkGameId();
            $url = "https://store.steampowered.com/app/{$appid}/?cc=ru";

            try {
                $output->writeln("üåê [$appid] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ URL: {$url}");

                $response = $this->httpClient->request('GET', $url, [
                    'headers' => [
                        'User-Agent' => 'Mozilla/5.0',
                    ]
                ]);

                $checked++;

                $html = $response->getContent();


                // 1. –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ü–µ–Ω—É —Å–æ —Å–∫–∏–¥–∫–æ–π
                if (preg_match('/<div class="discount_final_price">([^<]+)<\/div>/s', $html, $matches)) {
                    $priceText = strip_tags(trim($matches[1]));
                    $output->writeln("üí∏ [$appid] –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: $priceText");
                } elseif (preg_match('/<div class="game_purchase_price price"[^>]*>(.*?)<\/div>/s', $html, $matches)) {
                    $priceText = strip_tags(trim($matches[1]));
                    $output->writeln("üí∞ [$appid] –ù–∞–π–¥–µ–Ω–∞ –æ–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞: $priceText");
                } else {
                    $output->writeln("‚ùå [$appid] –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–∫–ª—é—á–∞–µ–º –∏–º–ø–æ—Ä—Ç.");
                    $gameShop->setShouldImportPrice(false);
                    $this->entityManager->persist($gameShop);
                    $this->entityManager->flush();
                    continue;
                }

                // –û—á–∏—Å—Ç–∫–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
                $cleaned = str_replace(['‚ÇΩ', '—Ä—É–±.', ' '], '', $priceText);
                $cleaned = str_replace(',', '.', $cleaned);
                $price = floatval($cleaned);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º, –µ—Å–ª–∏ —Ü–µ–Ω–∞ > 0
                if ($price > 0) {
                    $history = new GameShopPriceHistory();
                    $history->setGameShop($gameShop);
                    $history->setPrice($price);
                    $history->setUpdatedAt(new \DateTime());

                    $this->entityManager->persist($history);
                    $output->writeln("‚úÖ [$appid] {$gameShop->getName()} ‚Äî {$price} ‚ÇΩ");
                    $updated++;
                } else {
                    $output->writeln("‚úò [$appid] –¶–µ–Ω–∞ —Ä–∞–≤–Ω–∞ 0, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º.");
                }


                usleep(2000000); // –ü–∞—É–∑–∞ 1.5 —Å–µ–∫—É–Ω–¥—ã
            } catch (\Throwable $e) {
                $output->writeln("‚ö† [$appid] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {$e->getMessage()}");
            }
            $this->entityManager->flush();
        }

        $this->entityManager->flush();
        $output->writeln("üéâ –¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {$updated} –∏–≥—Ä –∏–∑ {$checked} –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö.");

        return Command::SUCCESS;
    }
}
