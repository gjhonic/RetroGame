<?php

namespace App\Command;

use App\Entity\GameShop;
use App\Entity\GameShopPriceHistory;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Contracts\HttpClient\HttpClientInterface;

#[AsCommand(
    name: 'app:steam-update-prices',
    description: 'Fetches current prices from Steam and saves them to price history',
)]
class SteamUpdatePricesCommand extends Command
{
    private EntityManagerInterface $entityManager;
    private HttpClientInterface $httpClient;

    public function __construct(EntityManagerInterface $entityManager, HttpClientInterface $httpClient)
    {
        parent::__construct();
        $this->entityManager = $entityManager;
        $this->httpClient = $httpClient;
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $startTime = microtime(true);

        $now = new \DateTime();
        $output->writeln('üöÄ <info>–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω Steam...</info>');
        $output->writeln('üìÖ <info>' . $now->format('Y-m-d H:i:s') . '</info>');

        $steamGames = $this->entityManager
            ->getRepository(GameShop::class)
            ->createQueryBuilder('gs')
            ->where('gs.shop = :shop')
            ->andWhere('gs.shouldImportPrice = true')
            ->setParameter('shop', 1)
            ->getQuery()
            ->getResult();

        $total = count($steamGames);
        $output->writeln("üîç <info>–ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {$total}</info>");

        $updated = 0;
        $checked = 0;

        $startOfDay = (new \DateTime())->setTime(0, 0, 0);
        $endOfDay = (new \DateTime())->setTime(23, 59, 59);

        $existingGameShops = $this->entityManager
            ->getRepository(GameShopPriceHistory::class)
            ->createQueryBuilder('h')
            ->select('IDENTITY(h.gameShop) AS gameShopId')
            ->where('h.updatedAt BETWEEN :start AND :end')
            ->setParameter('start', $startOfDay)
            ->setParameter('end', $endOfDay)
            ->groupBy('h.gameShop')
            ->getQuery()
            ->getArrayResult();

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø—Ä–æ—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ ID
        $alreadyUpdatedIds = array_column($existingGameShops, 'gameShopId');

        foreach ($steamGames as $index => $gameShop) {
            if ($checked >= 1000) {
                $output->writeln('‚èπÔ∏è <comment>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 1000 –∏–≥—Ä. –ó–∞–≤–µ—Ä—à–∞–µ–º.</comment>');
                break;
            }

            $game = $gameShop->getGame();

            if ($game && $game->isFree()) {
                $output->writeln(
                    "‚è© <comment> " .
                     "[{$gameShop->getLinkGameId()}] {$gameShop->getName()} ‚Äî –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∏–≥—Ä–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.</comment>"
                );
                continue;
            }

            if (in_array($gameShop->getId(), $alreadyUpdatedIds)) {
                $output->writeln(
                    "üîÑ <comment> " .
                    "[{$gameShop->getLinkGameId()}] {$gameShop->getName()} ‚Äî –¶–µ–Ω–∞ —É–∂–µ –µ—Å—Ç—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º." .
                        "</comment>"
                );
                continue;
            }

            usleep(random_int(1000000, 2000000));

            $appid = $gameShop->getLinkGameId();
            $url = "https://store.steampowered.com/app/{$appid}/?cc=ru";

            try {
                $output->writeln("üåê <info>[{$appid}] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ URL: {$url}</info>");

                $response = $this->httpClient->request('GET', $url, [
                    'headers' => [
                        'User-Agent' => 'Mozilla/5.0',
                    ]
                ]);

                $checked++;

                $html = $response->getContent();

                // 1. –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ü–µ–Ω—É —Å–æ —Å–∫–∏–¥–∫–æ–π
                if (preg_match('/<div class=\"discount_final_price\">([^<]+)<\/div>/s', $html, $matches)) {
                    $priceText = strip_tags(trim($matches[1]));
                    $output->writeln("üí∏ <info>[{$appid}] –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: $priceText</info>");
                } elseif (
                    preg_match('/<div class=\"game_purchase_price price\"[^>]*>(.*?)<\/div>/s', $html, $matches)
                ) {
                    $priceText = strip_tags(trim($matches[1]));
                    $output->writeln("üí∞ <info>[{$appid}] –ù–∞–π–¥–µ–Ω–∞ –æ–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞: $priceText</info>");
                } else {
                    $output->writeln("‚ùå <comment>[{$appid}] –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–∫–ª—é—á–∞–µ–º –∏–º–ø–æ—Ä—Ç.</comment>");
                    $gameShop->setShouldImportPrice(false);
                    $this->entityManager->persist($gameShop);
                    $this->entityManager->flush();
                    continue;
                }

                // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª—é—Ç—ã
                if (!str_contains($priceText, '‚ÇΩ') && !str_contains(mb_strtolower($priceText), '—Ä—É–±')) {
                    $output->writeln("üö´ <comment>[{$appid}] –¶–µ–Ω–∞ –≤ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π –≤–∞–ª—é—Ç–µ: {$priceText}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.</comment>");
                    continue;
                }

                // 3. –û—á–∏—Å—Ç–∫–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
                $cleaned = str_replace(['‚ÇΩ', '—Ä—É–±.', '—Ä—É–±', ' '], '', mb_strtolower($priceText));
                $cleaned = str_replace(',', '.', $cleaned);
                $price = floatval($cleaned);

                // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º, –µ—Å–ª–∏ —Ü–µ–Ω–∞ > 0
                if ($price > 0) {
                    $history = new GameShopPriceHistory();
                    $history->setGameShop($gameShop);
                    $history->setPrice($price);
                    $history->setUpdatedAt(new \DateTime());

                    $this->entityManager->persist($history);
                    $output->writeln("‚úÖ <info>[{$appid}] {$gameShop->getName()} ‚Äî {$price} ‚ÇΩ</info>");
                    $updated++;
                } else {
                    $output->writeln("‚ö†Ô∏è <comment>[{$appid}] –¶–µ–Ω–∞ —Ä–∞–≤–Ω–∞ 0, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º.</comment>");
                }
            } catch (\Throwable $e) {
                $output->writeln("<error>‚õî [{$appid}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {$e->getMessage()}</error>");
            }
            $this->entityManager->flush();
        }

        $this->entityManager->flush();
        $output->writeln("üéâ <info>–¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {$updated} –∏–≥—Ä –∏–∑ {$checked} –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö.</info>");

        $endTime = microtime(true);
        $duration = $endTime - $startTime;
        $output->writeln(sprintf("‚è±Ô∏è <info>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: %.2f —Å–µ–∫—É–Ω–¥</info>", $duration));

        return Command::SUCCESS;
    }
}
