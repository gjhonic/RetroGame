<?php

namespace App\Command;

use App\Entity\Game;
use App\Entity\GameShop;
use App\Entity\Shop;
use App\Entity\SteampayApp;
use App\Service\SlugifyProcessor;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Contracts\HttpClient\HttpClientInterface;

#[AsCommand(
    name: 'app:steampay-get-games',
    description: 'Links games with SteamPay if a valid page exists.',
)]
class SteampayGetGamesCommand extends Command
{
    public function __construct(
        private readonly HttpClientInterface $httpClient,
        private readonly EntityManagerInterface $entityManager,
    ) {
        parent::__construct();
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $games = $this->entityManager->getRepository(Game::class)->findAll();
        $shop = $this->entityManager->getRepository(Shop::class)->findOneBy(['id' => 3]);

        if (!$shop) {
            $output->writeln('<error>‚õî –ú–∞–≥–∞–∑–∏–Ω —Å ID 3 –Ω–µ –Ω–∞–π–¥–µ–Ω</error>');

            return Command::FAILURE;
        }

        $output->writeln(sprintf('üöÄ <info>–ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è %d –∏–≥—Ä...</info>', count($games)));

        $imported = 0;
        $skippedExistingShop = 0;
        $skippedNotFound = 0;
        $errorsCount = 0;

        foreach ($games as $game) {
            if ($imported >= 200) {
                $output->writeln('‚èπÔ∏è <comment>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç 200 –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º.</comment>');
                break;
            }

            $slug = SlugifyProcessor::process((string) $game->getName());
            $url = "https://steampay.com/game/{$slug}/";

            $output->writeln("üéÆ <info>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–≥—Ä—É: '{$game->getName()}', slug: $slug</info>");

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è GameShop
            $existingShop = $this->entityManager->getRepository(GameShop::class)->findOneBy([
                'game' => $game,
                'shop' => $shop,
            ]);

            if ($existingShop) {
                ++$skippedExistingShop;
                continue;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ SteampayApp
            $SteampayApp = $this->entityManager->getRepository(SteampayApp::class)->findOneBy([
                'slug' => $slug,
            ]);

            if ($SteampayApp && $SteampayApp->isNotFound()) {
                $output->writeln('‚è© <comment>–†–∞–Ω–µ–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ 404 (–Ω–µ –Ω–∞–π–¥–µ–Ω–æ). –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.</comment>');
                ++$skippedNotFound;
                continue;
            }

            usleep(random_int(1000000, 2000000));

            try {
                $output->writeln("üåê <info>–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º URL: $url</info>");
                $response = $this->httpClient->request('GET', $url);
                $content = $response->getContent(false);

                if (!$SteampayApp) {
                    $SteampayApp = new SteampayApp();
                    $SteampayApp->setSlug($slug);
                    $output->writeln('üÜï <info>–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å SteampayApp –¥–ª—è slug.</info>');
                } else {
                    $output->writeln('üîÑ <info>–ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–ø–∏—Å—å SteampayApp, –æ–±–Ω–æ–≤–ª—è–µ–º.</info>');
                }

                $SteampayApp->setCreatedAt(new \DateTimeImmutable());

                if (
                    str_contains($content, '–û—à–∏–±–∫–∞! –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
                    || preg_match('/<h1[^>]*not-found-error__title[^>]*>–û—à–∏–±–∫–∞! –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\./', $content)
                ) {
                    $SteampayApp->setNotFound(true);
                    $SteampayApp->setRawHtml(null);
                    $output->writeln('‚ùå <comment>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–µ—Ä–Ω—É–ª–∞ 404. –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</comment>');
                } else {
                    $SteampayApp->setNotFound(false);
                    $SteampayApp->setRawHtml(null);

                    $gameShop = new GameShop();
                    $gameShop->setGame($game);
                    $gameShop->setShop($shop);
                    $gameShop->setName((string) $game->getName());
                    $gameShop->setLink($url);
                    $gameShop->setShouldImportPrice(true);
                    $gameShop->setExternalKey($slug);
                    $gameShop->setLinkGameId(0);

                    $this->entityManager->persist($gameShop);

                    $output->writeln("‚úÖ <info>GameShop —Å–æ–∑–¥–∞–Ω –∏ —Å–≤—è–∑–∞–Ω —Å –∏–≥—Ä–æ–π '{$game->getName()}'.</info>");
                    ++$imported;
                }

                $this->entityManager->persist($SteampayApp);
                $this->entityManager->flush();
            } catch (\Throwable $e) {
                ++$errorsCount;
                $output->writeln("<error>‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ $slug: {$e->getMessage()}</error>");
            }
        }

        $output->writeln('');
        $output->writeln('üìä <info>–ò—Ç–æ–≥–∏ –∏–º–ø–æ—Ä—Ç–∞:</info>');
        $output->writeln(' - –í—Å–µ–≥–æ –∏–≥—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ' . count($games));
        $output->writeln(" - –°–≤—è–∑–∞–Ω–æ/–∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: $imported");
        $output->writeln(" - –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å–≤—è–∑–∞–Ω–æ): $skippedExistingShop");
        $output->writeln(" - –ü—Ä–æ–ø—É—â–µ–Ω–æ (404 —Ä–∞–Ω–µ–µ): $skippedNotFound");
        $output->writeln(" - –û—à–∏–±–æ–∫: $errorsCount");

        return Command::SUCCESS;
    }
}
