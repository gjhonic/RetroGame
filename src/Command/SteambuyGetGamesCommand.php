<?php

namespace App\Command;

use App\Entity\Game;
use App\Entity\GameShop;
use App\Entity\LogCron;
use App\Entity\Shop;
use App\Entity\SteambuyApp;
use App\Service\SlugifyProcessor;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Contracts\HttpClient\HttpClientInterface;

/**
 * –ö–æ–º–∞–Ω–¥–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–≥—Ä –∏–∑ Steambuy.
 *
 * –°–∏—Å—Ç–µ–º–Ω–æ–µ –∏–º—è: app:steambuy-get-games
 *
 * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
 *   –°–≤—è–∑—ã–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–≥—Ä—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –º–∞–≥–∞–∑–∏–Ω–æ–º Steambuy, –µ—Å–ª–∏ –¥–ª—è –Ω–∏—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤–∞–ª–∏–¥–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.
 *
 * –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
 *   - –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∏–≥—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
 *   - –î–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã:
 *       - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç slug –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–≥—Ä—ã.
 *       - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ Steambuy –ø–æ URL.
 *       - –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî —Å–æ–∑–¥–∞–µ—Ç —Å–≤—è–∑—å GameShop.
 *       - –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –æ—Ç–º–µ—á–∞–µ—Ç –≤ SteambuyApp –∫–∞–∫ not found.
 *   - –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É 200 –∏–≥—Ä–∞–º–∏ –∑–∞ –∑–∞–ø—É—Å–∫.
 *   - –î–µ–ª–∞–µ—Ç –ø–∞—É–∑—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.
 *
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:
 *   - –§–∏–∫—Å–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
 *   - –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∏–≥—Ä, –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∏ –æ—à–∏–±–æ–∫.
 *   - –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∏ –ø–∏–∫–æ–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏.
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   php bin/console app:steambuy-get-games
 *
 * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
 *   - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SlugifyProcessor –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL-–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–º–µ–Ω.
 *   - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–≤—è–∑–∏ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤—ã—Ö.
 *   - –ö—ç—à–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –≤ SteambuyApp.
 *   - –î–µ–ª–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –ø–∞—É–∑—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (1-2 —Å–µ–∫—É–Ω–¥—ã).
 */
#[AsCommand(
    name: 'app:steambuy-get-games',
    description: 'Links games with SteamBuy if a valid page exists.',
)]
class SteambuyGetGamesCommand extends Command
{
    public function __construct(
        private readonly HttpClientInterface $httpClient,
        private readonly EntityManagerInterface $entityManager,
    ) {
        parent::__construct();
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $startTime = microtime(true);

        // --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞ ---
        $logsCron = new LogCron();
        $logsCron->setCronName('steambuy-get-games');
        $logsCron->setDatetimeStart(new \DateTime());
        $this->entityManager->persist($logsCron);
        $this->entityManager->flush();

        $games = $this->entityManager->getRepository(Game::class)->findAll();
        $shop = $this->entityManager->getRepository(Shop::class)->findOneBy(['id' => 2]);

        if (!$shop) {
            $output->writeln('<error>‚õî –ú–∞–≥–∞–∑–∏–Ω —Å ID 2 –Ω–µ –Ω–∞–π–¥–µ–Ω</error>');

            return Command::FAILURE;
        }

        $output->writeln(sprintf('üöÄ <info>–ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è %d –∏–≥—Ä...</info>', count($games)));

        $imported = 0;
        $skippedExistingShop = 0;
        $skippedNotFound = 0;
        $errorsCount = 0;

        foreach ($games as $game) {
            if ($imported >= 200) {
                $output->writeln('‚èπÔ∏è <comment>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç 200 –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º.</comment>');
                break;
            }

            $slug = SlugifyProcessor::process((string) $game->getName()) . '-russia';
            $url = "https://steambuy.com/steam/{$slug}/";

            $output->writeln("üéÆ <info>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–≥—Ä—É: '{$game->getName()}', slug: $slug</info>");

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è GameShop
            $existingShop = $this->entityManager->getRepository(GameShop::class)->findOneBy([
                'game' => $game,
                'shop' => $shop,
            ]);

            if ($existingShop) {
                ++$skippedExistingShop;
                continue;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ SteambuyApp
            $steambuyApp = $this->entityManager->getRepository(SteambuyApp::class)->findOneBy([
                'slug' => $slug,
            ]);

            if ($steambuyApp && $steambuyApp->isNotFound()) {
                $output->writeln('‚è© <comment>–†–∞–Ω–µ–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ 404 (–Ω–µ –Ω–∞–π–¥–µ–Ω–æ). –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.</comment>');
                ++$skippedNotFound;
                continue;
            }

            usleep(random_int(1000000, 2000000));

            try {
                $output->writeln("üåê <info>–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º URL: $url</info>");
                $response = $this->httpClient->request('GET', $url);
                $content = $response->getContent(false);

                if (!$steambuyApp) {
                    $steambuyApp = new SteambuyApp();
                    $steambuyApp->setSlug($slug);
                    $output->writeln('üÜï <info>–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å SteambuyApp –¥–ª—è slug.</info>');
                } else {
                    $output->writeln('üîÑ <info>–ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–ø–∏—Å—å SteambuyApp, –æ–±–Ω–æ–≤–ª—è–µ–º.</info>');
                }

                $steambuyApp->setCreatedAt(new \DateTimeImmutable());

                if (
                    str_contains($content, '–û—à–∏–±–∫–∞ 404')
                    || preg_match('/<div\s+class="review-heaing__title">\s*–û—à–∏–±–∫–∞ 404\s*<\/div>/i', $content)
                ) {
                    $steambuyApp->setNotFound(true);
                    $steambuyApp->setRawHtml(null);
                    $output->writeln('‚ùå <comment>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–µ—Ä–Ω—É–ª–∞ 404. –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</comment>');
                } else {
                    $steambuyApp->setNotFound(false);
                    $steambuyApp->setRawHtml(null);

                    $gameShop = new GameShop();
                    $gameShop->setGame($game);
                    $gameShop->setShop($shop);
                    $gameShop->setName((string) $game->getName());
                    $gameShop->setLink($url);
                    $gameShop->setShouldImportPrice(true);
                    $gameShop->setExternalKey($slug);
                    $gameShop->setLinkGameId(0);

                    $this->entityManager->persist($gameShop);

                    $output->writeln("‚úÖ <info>GameShop —Å–æ–∑–¥–∞–Ω –∏ —Å–≤—è–∑–∞–Ω —Å –∏–≥—Ä–æ–π '{$game->getName()}'.</info>");
                    ++$imported;
                }

                $this->entityManager->persist($steambuyApp);
                $this->entityManager->flush();
            } catch (\Throwable $e) {
                ++$errorsCount;
                $output->writeln("<error>‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ $slug: {$e->getMessage()}</error>");
            }
        }

        $output->writeln('');
        $output->writeln('üìä <info>–ò—Ç–æ–≥–∏ –∏–º–ø–æ—Ä—Ç–∞:</info>');
        $output->writeln(' - –í—Å–µ–≥–æ –∏–≥—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ' . count($games));
        $output->writeln(" - –°–≤—è–∑–∞–Ω–æ/–∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: $imported");
        $output->writeln(" - –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å–≤—è–∑–∞–Ω–æ): $skippedExistingShop");
        $output->writeln(" - –ü—Ä–æ–ø—É—â–µ–Ω–æ (404 —Ä–∞–Ω–µ–µ): $skippedNotFound");
        $output->writeln(" - –û—à–∏–±–æ–∫: $errorsCount");

        // --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è ---
        $endTime = microtime(true);
        $duration = $endTime - $startTime;
        $logsCron->setDatetimeEnd(new \DateTime());
        $logsCron->setWorkTime($duration);
        $logsCron->setMaxMemorySize(round(memory_get_peak_usage(true) / 1024 / 1024, 2));
        $this->entityManager->persist($logsCron);
        $this->entityManager->flush();

        return Command::SUCCESS;
    }
}
