<?php

namespace App\Command;

use App\Entity\GameShop;
use App\Entity\GameShopPriceHistory;
use App\Entity\LogCron;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Contracts\HttpClient\HttpClientInterface;

/**
 * –ö–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ –∏–≥—Ä—ã IGM.gg.
 *
 * –°–∏—Å—Ç–µ–º–Ω–æ–µ –∏–º—è: app:igm-update-prices
 *
 * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
 *   –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –∏–≥—Ä—ã –∏–∑ IGM.gg –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω.
 *
 * –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
 *   - –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∏–≥—Ä—ã IGM.gg, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã (shop=IGM.gg, shouldImportPrice=true).
 *   - –î–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã:
 *       - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–±–Ω–æ–≤–ª—è–ª–∞—Å—å –ª–∏ —Ü–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è.
 *       - –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–≥—Ä—ã —Å —Å–∞–π—Ç–∞ IGM.gg.
 *       - –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–µ–Ω—É –∏–∑ –±–ª–æ–∫–∞ Price_price__price-text__MpdHL.
 *       - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ —Ç–∏–ø —Ü–µ–Ω—ã.
 *       - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ü–µ–Ω—É –≤ –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ > 0.
 *   - –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É 1000 –∏–≥—Ä–∞–º–∏ –∑–∞ –∑–∞–ø—É—Å–∫.
 *   - –î–µ–ª–∞–µ—Ç –ø–∞—É–∑—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.
 *
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:
 *   - –§–∏–∫—Å–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã, –ø–∏–∫–æ–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏.
 *   - –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏–≥—Ä.
 *   - –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –∏ –ø—Ä–æ–ø—É—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —Ç–æ–≤–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç).
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   php bin/console app:igm-update-prices
 *
 * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
 *   - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏: "—Å–∫–æ—Ä–æ" (—Ç–æ–≤–∞—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç).
 *   - –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ª–∏—á–∏–∏ —Ç–æ–≤–∞—Ä–∞.
 *   - –û—Ç–∫–ª—é—á–∞–µ—Ç –∏–º–ø–æ—Ä—Ç —Ü–µ–Ω –¥–ª—è –∏–≥—Ä, –≥–¥–µ —Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.
 *   - –î–µ–ª–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –ø–∞—É–∑—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (1-2 —Å–µ–∫—É–Ω–¥—ã).
 *   - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ü–µ–Ω—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π.
 */
#[AsCommand(
    name: 'app:igm-update-prices',
    description: 'Fetches current prices from IGM.gg and saves them to price history',
)]
class IgmUpdatePricesCommand extends Command
{
    private EntityManagerInterface $entityManager;
    private HttpClientInterface $httpClient;

    public function __construct(EntityManagerInterface $entityManager, HttpClientInterface $httpClient)
    {
        parent::__construct();
        $this->entityManager = $entityManager;
        $this->httpClient = $httpClient;
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $startTime = microtime(true);

        $now = new \DateTime();
        $output->writeln('üöÄ <info>–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω IGM.gg...</info>');
        $output->writeln('üìÖ <info>' . $now->format('Y-m-d H:i:s') . '</info>');

        // --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞ ---
        $logsCron = new LogCron();
        $logsCron->setCronName('igm-update-prices');
        $logsCron->setDatetimeStart(new \DateTime());
        $this->entityManager->persist($logsCron);
        $this->entityManager->flush();

        $shop = $this->entityManager->getRepository(\App\Entity\Shop::class)->find(5);
        if (!$shop) {
            $output->writeln('<error>‚õî –ú–∞–≥–∞–∑–∏–Ω IGM.gg (id=5) –Ω–µ –Ω–∞–π–¥–µ–Ω</error>');

            return Command::FAILURE;
        }

        $gameShops = $this->entityManager
            ->getRepository(GameShop::class)
            ->createQueryBuilder('gs')
            ->where('gs.shop = :shop')
            ->andWhere('gs.shouldImportPrice = true')
            ->setParameter('shop', $shop)
            ->getQuery()
            ->getResult();

        $total = count($gameShops);
        $output->writeln("üîç <info>–ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {$total}</info>");

        $updated = 0;
        $checked = 0;

        $startOfDay = (new \DateTime())->setTime(0, 0, 0);
        $endOfDay = (new \DateTime())->setTime(23, 59, 59);

        $existingGameShops = $this->entityManager
            ->getRepository(GameShopPriceHistory::class)
            ->createQueryBuilder('h')
            ->select('IDENTITY(h.gameShop) AS gameShopId')
            ->where('h.updatedAt BETWEEN :start AND :end')
            ->setParameter('start', $startOfDay)
            ->setParameter('end', $endOfDay)
            ->groupBy('h.gameShop')
            ->getQuery()
            ->getArrayResult();

        $alreadyUpdatedIds = array_column($existingGameShops, 'gameShopId');

        foreach ($gameShops as $gameShop) {
            if ($checked >= 1000) {
                $output->writeln('‚èπÔ∏è <comment>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 1000 –∏–≥—Ä. –ó–∞–≤–µ—Ä—à–∞–µ–º.</comment>');
                break;
            }

            $slug = $gameShop->getExternalKey();
            $url = "https://igm.gg/game/{$slug}/";

            $output->writeln("üåê <info>–ó–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã –¥–ª—è '{$gameShop->getName()}', URL: $url</info>");

            if (in_array($gameShop->getId(), $alreadyUpdatedIds)) {
                $output->writeln(
                    'üîÑ <comment> ' .
                    "[{$gameShop->getLinkGameId()}] {$gameShop->getName()} ‚Äî –¶–µ–Ω–∞ —É–∂–µ –µ—Å—Ç—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º." .
                    '</comment>'
                );
                continue;
            }

            usleep(random_int(1000000, 2000000));

            try {
                $start = microtime(true);
                $response = $this->httpClient->request('GET', $url, [
                    'headers' => [
                        'User-Agent' => 'Mozilla/5.0',
                    ],
                ]);
                $duration = round(microtime(true) - $start, 2);

                ++$checked;

                $html = $response->getContent();

                // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –∏–∑ –±–ª–æ–∫–∞ Price_price__price-text__MpdHL
                if (
                    preg_match(
                        '/<p[^>]*class="[^"]*Price_price__price-text__MpdHL[^"]*"[^>]*>(.*?)<\/p>/s',
                        $html,
                        $matches
                    )
                ) {
                    $priceBlock = trim(strip_tags($matches[1]));

                    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º HTML-—Å—É—â–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, &nbsp;)
                    $priceBlock = html_entity_decode($priceBlock, ENT_QUOTES | ENT_HTML5, 'UTF-8');

                    // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –≤–∏–¥—ã –ø—Ä–æ–±–µ–ª–æ–≤ –Ω–∞ –æ–±—ã—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
                    $priceBlock = preg_replace('/[\s\x{00A0}\x{2009}\x{202F}]+/u', ' ', $priceBlock);

                    $priceText = preg_replace('/\s+/', ' ', $priceBlock); // —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

                    // –£–¥–∞–ª—è–µ–º '‚ÇΩ' –∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã –≤–∞–ª—é—Ç—ã
                    $priceText = preg_replace('/[‚ÇΩ‚Ç¥$‚Ç¨¬£¬•]/ui', '', (string) $priceText);
                    $priceText = trim((string) $priceText);

                    if ('—Å–∫–æ—Ä–æ' === mb_strtolower($priceText)) {
                        $output->writeln(
                            '‚ÑπÔ∏è <comment> ' .
                            '–¢–æ–≤–∞—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–°–∫–æ—Ä–æ), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –∏–º–ø–æ—Ä—Ç –æ—Å—Ç–∞–≤–ª–µ–Ω –≤–∫–ª—é—á—ë–Ω–Ω—ã–º.</comment>'
                        );
                    } elseif (preg_match('/^[\d\s]+$/u', $priceText)) {
                        $priceClean = str_replace(' ', '', $priceText);
                        $price = floatval($priceClean);

                        if ($price > 0) {
                            $history = new GameShopPriceHistory();
                            $history->setGameShop($gameShop);
                            $history->setPrice($price);
                            $history->setUpdatedAt(new \DateTime());

                            $this->entityManager->persist($history);
                            $output->writeln("‚úÖ <info>–¶–µ–Ω–∞ {$price} ‚ÇΩ –ø–æ–ª—É—á–µ–Ω–∞ –∑–∞ {$duration} —Å–µ–∫.</info>");
                            ++$updated;
                        } else {
                            $output->writeln('‚ö†Ô∏è <comment>–¶–µ–Ω–∞ —Ä–∞–≤–Ω–∞ 0, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º.</comment>');
                        }
                    } else {
                        $output->writeln('‚ùå <comment> ' .
                            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã: '{$priceText}', –æ—Ç–∫–ª—é—á–∞–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–≥—Ä—ã.</comment>");
                        $gameShop->setShouldImportPrice(false);
                        $this->entityManager->persist($gameShop);
                    }
                } else {
                    $output->writeln('‚ùå <comment>–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–∫–ª—é—á–∞–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–≥—Ä—ã.</comment>');
                    $gameShop->setShouldImportPrice(false);
                    $this->entityManager->persist($gameShop);
                }
            } catch (\Throwable $e) {
                if (404 == $e->getCode()) {
                    $output->writeln('‚ùå <comment>–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–∫–ª—é—á–∞–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–≥—Ä—ã.</comment>');
                    $gameShop->setShouldImportPrice(false);
                    $this->entityManager->persist($gameShop);
                } else {
                    $output->writeln("<error>‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {$e->getMessage()}</error>");
                }
            }

            $this->entityManager->flush();
        }

        $output->writeln("üéâ <info>–¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {$updated} –∏–≥—Ä –∏–∑ {$checked} –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö.</info>");

        // --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è ---
        $endTime = microtime(true);
        $duration = $endTime - $startTime;
        $logsCron->setDatetimeEnd(new \DateTime());
        $logsCron->setWorkTime($duration);
        $logsCron->setMaxMemorySize(round(memory_get_peak_usage(true) / 1024 / 1024, 2));
        $this->entityManager->persist($logsCron);
        $this->entityManager->flush();

        return Command::SUCCESS;
    }
}
