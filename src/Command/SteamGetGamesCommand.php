<?php

namespace App\Command;

use App\Entity\Game;
use App\Entity\GameShop;
use App\Entity\SteamApp;
use App\Service\SteamGameDataProcessor;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Contracts\HttpClient\Exception\TransportExceptionInterface;
use Symfony\Contracts\HttpClient\HttpClientInterface;

#[AsCommand(
    name: 'app:steam-get-games',
    description: 'Fetches popular Steam games and stores them in the database.',
)]
class SteamGetGamesCommand extends Command
{
    public function __construct(
        private readonly HttpClientInterface $httpClient,
        private readonly EntityManagerInterface $entityManager,
        private readonly SteamGameDataProcessor $gameDataProcessor,
    ) {
        parent::__construct();
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $output->writeln('üöÄ <info>–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π Steam...</info>');

        try {
            $response = $this->httpClient->request('GET', 'https://api.steampowered.com/ISteamApps/GetAppList/v2/');
            $data = $response->toArray();
        } catch (\Throwable $e) {
            $output->writeln('<error>‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: ' . $e->getMessage() . '</error>');
            return Command::FAILURE;
        }

        $apps = $data['applist']['apps'] ?? [];
        $output->writeln('üîç <info>–í—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: ' . count($apps) . '</info>');

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞—Ä–∞–Ω–µ–µ –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        $output->writeln('üìä <info>–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...</info>');

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ app_id –∏–∑ SteamApp
        $existingSteamAppIds = $this->entityManager
            ->getRepository(SteamApp::class)
            ->createQueryBuilder('sa')
            ->select('sa.app_id')
            ->getQuery()
            ->getSingleColumnResult();
        $existingSteamAppIds = array_flip($existingSteamAppIds);

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ link_game_id –∏–∑ GameShop
        $existingGameShopIds = $this->entityManager
            ->getRepository(GameShop::class)
            ->createQueryBuilder('gs')
            ->select('gs.link_game_id')
            ->where('gs.link_game_id IS NOT NULL')
            ->getQuery()
            ->getSingleColumnResult();
        $existingGameShopIds = array_flip($existingGameShopIds);

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–º–µ–Ω–∞ –∏–≥—Ä
        $existingGameNames = $this->entityManager
            ->getRepository(Game::class)
            ->createQueryBuilder('g')
            ->select('g.name')
            ->getQuery()
            ->getSingleColumnResult();
        $existingGameNames = array_flip($existingGameNames);

        $output->writeln(sprintf(
            'üìà <info>–ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: SteamApp=%d, GameShop=%d, Game=%d</info>',
            count($existingSteamAppIds),
            count($existingGameShopIds),
            count($existingGameNames)
        ));

        $imported = 0;
        $processedCount = 0;
        $checked = 0;
        $batchSize = 10;

        foreach ($apps as $app) {
            if ($processedCount >= 300) {
                $output->writeln('‚èπÔ∏è <comment>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç 300 –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–≥—Ä. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç.</comment>');
                break;
            }

            $appid = $app['appid'] ?? null;
            $gameName = trim($app['name'] ?? '');

            if (!$appid || !$gameName) {
                continue;
            }

            // –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ? (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
            if (isset($existingSteamAppIds[$appid])) {
                continue;
            }

            if ($checked === 30) {
                $this->entityManager->flush();
                $output->writeln("‚è≥ <info>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ 30 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –ø–∞—É–∑–∞ 10 —Å–µ–∫—É–Ω–¥...</info>");

                usleep(random_int(7000000, 10000000));
                $checked = 0;
            }

            $checked++;

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            try {
                $detailsResponse = $this->httpClient->request(
                    'GET',
                    "https://store.steampowered.com/api/appdetails?appids={$appid}&cc=ru&l=ru"
                );
                $detailsData = $detailsResponse->toArray();
            } catch (TransportExceptionInterface $e) {
                $output->writeln("<comment>‚ö†Ô∏è HTTP-–æ—à–∏–±–∫–∞ –¥–ª—è {$appid}: {$e->getMessage()}</comment>");
                continue;
            } catch (\Throwable) {
                $output->writeln("<comment>‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è {$appid}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.</comment>");
                continue;
            }

            $processedCount++;

            usleep(random_int(1000000, 2000000));

            $steamApp = new SteamApp();
            $steamApp->setAppId($appid);
            $steamApp->setType($detailsData[$appid]['data']['type'] ?? 'empty');
            $steamApp->setRawData((string)json_encode($detailsData, JSON_UNESCAPED_UNICODE));
            $this->entityManager->persist($steamApp);
            $this->entityManager->flush();

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            $processed = $this->gameDataProcessor->processGameData(
                $detailsData,
                $output,
                $existingGameNames,
                $existingGameShopIds
            );

            if ($processed) {
                $imported++;
                if ($imported % $batchSize === 0) {
                    $this->entityManager->flush();
                    $output->writeln("üì¶ <info>–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {$imported} –∏–≥—Ä –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç...</info>");
                }
            }
        }

        $this->entityManager->flush();
        $output->writeln("üéâ <info>–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –í—Å–µ–≥–æ –∏–≥—Ä –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {$imported}</info>");

        return Command::SUCCESS;
    }
}
