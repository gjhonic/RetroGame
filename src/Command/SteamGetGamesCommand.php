<?php

namespace App\Command;

use App\Entity\Game;
use App\Entity\GameShop;
use App\Entity\Genre;
use App\Entity\Shop;
use App\Entity\SteamApp;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Contracts\HttpClient\Exception\TransportExceptionInterface;
use Symfony\Contracts\HttpClient\HttpClientInterface;

#[AsCommand(
    name: 'app:steam-get-games',
    description: 'Fetches popular Steam games and stores them in the database.',
)]
class SteamGetGamesCommand extends Command
{
    public function __construct(
        private readonly HttpClientInterface $httpClient,
        private readonly EntityManagerInterface $entityManager,
    ) {
        parent::__construct();
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $output->writeln('üöÄ <info>–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π Steam...</info>');

        try {
            $response = $this->httpClient->request('GET', 'https://api.steampowered.com/ISteamApps/GetAppList/v2/');
            $data = $response->toArray();
        } catch (\Throwable $e) {
            $output->writeln('<error>‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: ' . $e->getMessage() . '</error>');
            return Command::FAILURE;
        }

        $apps = $data['applist']['apps'] ?? [];
        $output->writeln('üîç <info>–í—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: ' . count($apps) . '</info>');

        $shopSteam = $this->entityManager
            ->getRepository(Shop::class)
            ->find(1);

        if (!$shopSteam) {
            $output->writeln('<error>‚õî –ú–∞–≥–∞–∑–∏–Ω Steam (id=1) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.</error>');
            return Command::FAILURE;
        }

        $imported = 0;
        $checked = 0;
        $genreCache = [];
        $batchSize = 10;

        foreach ($apps as $app) {
            if ($imported >= 200) {
                $output->writeln('‚èπÔ∏è <comment>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç 200 –Ω–æ–≤—ã—Ö –∏–≥—Ä. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç.</comment>');
                break;
            }

            $appid = $app['appid'] ?? null;
            $gameName = trim($app['name'] ?? '');

            if (!$appid || !$gameName) {
                continue;
            }

            // –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ?
            $existingSteamApp = $this->entityManager
                ->getRepository(SteamApp::class)
                ->findOneBy(['app_id' => $appid]);

            if ($existingSteamApp) {
                $output->writeln("<comment>‚è© –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {$appid} —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ.</comment>");
                continue;
            }

            if ($checked === 30) {
                $this->entityManager->flush();
                $output->writeln("‚è≥ <info>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ 30 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –ø–∞—É–∑–∞ 10 —Å–µ–∫—É–Ω–¥...</info>");

                usleep(random_int(7000000, 10000000));
                $checked = 0;
            }

            $checked++;

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            try {
                $detailsResponse = $this->httpClient->request(
                    'GET',
                    "https://store.steampowered.com/api/appdetails?appids={$appid}&cc=ru&l=ru"
                );
                $detailsData = $detailsResponse->toArray();
            } catch (TransportExceptionInterface $e) {
                $output->writeln("<comment>‚ö†Ô∏è HTTP-–æ—à–∏–±–∫–∞ –¥–ª—è {$appid}: {$e->getMessage()}</comment>");
                continue;
            } catch (\Throwable) {
                $output->writeln("<comment>‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è {$appid}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.</comment>");
                continue;
            }

            usleep(random_int(1000000, 2000000));

            $raw = $detailsData[$appid] ?? null;
            $success = $raw['success'] ?? false;
            $gameData = $raw['data'] ?? null;

            $steamApp = new SteamApp();
            $steamApp->setAppId($appid);
            $steamApp->setType($gameData['type'] ?? 'empty');
            $steamApp->setRawData((string)json_encode($raw, JSON_UNESCAPED_UNICODE));
            $this->entityManager->persist($steamApp);
            $this->entityManager->flush();

            if (!$success || empty($gameData)) {
                $output->writeln(
                    "<comment>" .
                    "‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {$appid} –ø—É—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ type=empty.</comment>"
                );
                continue;
            }

            $output->writeln("‚úÖ <info>–î–µ—Ç–∞–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è {$appid} –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.</info>");

            if (
                ($gameData['type'] ?? '') !== 'game' ||
                empty($gameData['short_description']) ||
                empty($gameData['genres']) ||
                empty($gameData['price_overview'])
            ) {
                $output->writeln("<comment>‚è© –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {$appid} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–≥—Ä–æ–π.</comment>");
                continue;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ GameShop
            $existingGameShop = $this->entityManager
                ->getRepository(GameShop::class)
                ->findOneBy(['link_game_id' => $appid]);

            if ($existingGameShop) {
                $output->writeln("<comment>‚è© –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {$appid} —É–∂–µ —Å–≤—è–∑–∞–Ω–æ —Å GameShop.</comment>");
                continue;
            }

            // –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –∏—â–µ–º Game
            $game = $this->entityManager
                ->getRepository(Game::class)
                ->findOneBy(['name' => $gameName]);

            if (!$game) {
                $recommendations = $gameData['recommendations']['total'] ?? null;
                $ownersCount = null;

                if ($recommendations !== null) {
                    $ownersCount = (int) $recommendations;
                }

                $game = new Game();
                $game->setName($gameName);
                $game->setDescription($gameData['short_description']);
                $game->setIsFree(!empty($gameData['is_free']));
                $game->setOwnersCount($ownersCount);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                $imageUrl = $gameData['header_image'] ?? null;
                if ($imageUrl) {
                    try {
                        $imageContents = file_get_contents($imageUrl);
                        $imageName = uniqid('game_') . '.jpg';
                        $savePath = __DIR__ . '/../../public/uploads/games/' . $imageName;

                        if (!is_dir(dirname($savePath))) {
                            mkdir(dirname($savePath), 0777, true);
                        }

                        file_put_contents($savePath, $imageContents);
                        $game->setImage('/uploads/games/' . $imageName);
                    } catch (\Throwable) {
                        $output->writeln("<comment>‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {$appid}</comment>");
                    }
                }

                try {
                    $game->setReleaseDate(new \DateTime($gameData['release_date']['date'] ?? '2000-01-01'));
                } catch (\Exception) {
                    $game->setReleaseDate(new \DateTime('2000-01-01'));
                }

                $game->setCreatedAt(new \DateTimeImmutable());
                $game->setCreatedBy('system');
                $this->entityManager->persist($game);
            }

            // –ñ–∞–Ω—Ä—ã
            foreach ($gameData['genres'] as $genreItem) {
                $genreName = trim($genreItem['description']);

                if (isset($genreCache[$genreName])) {
                    $genre = $genreCache[$genreName];
                } else {
                    $genre = $this->entityManager
                        ->getRepository(Genre::class)
                        ->findOneBy(['name' => $genreName]);

                    if (!$genre) {
                        $genre = new Genre();
                        $genre->setName($genreName);
                        $genre->setCreatedAt(new \DateTimeImmutable());
                        $genre->setCreatedBy('system');
                        $this->entityManager->persist($genre);
                    }

                    $genreCache[$genreName] = $genre;
                }

                if (!$game->getGenre()->contains($genre)) {
                    $game->addGenre($genre);
                }
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º GameShop
            $gameShop = new GameShop();
            $gameShop->setGame($game);
            $gameShop->setShop($shopSteam);
            $gameShop->setLinkGameId($appid);
            $gameShop->setName($gameName);
            $gameShop->setLink("https://store.steampowered.com/app/{$appid}/");
            $this->entityManager->persist($gameShop);

            $imported++;
            if ($imported % $batchSize === 0) {
                $this->entityManager->flush();
                $output->writeln("üì¶ <info>–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {$imported} –∏–≥—Ä –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç...</info>");
            }
        }

        $this->entityManager->flush();
        $output->writeln("üéâ <info>–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –í—Å–µ–≥–æ –∏–≥—Ä –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {$imported}</info>");

        return Command::SUCCESS;
    }
}
