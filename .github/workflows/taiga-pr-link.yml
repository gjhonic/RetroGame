name: Link PR to Taiga Task (Hybrid Auth)

on:
  pull_request:
    types: [opened, edited, reopened]

env:
  TAIGA_API: https://api.taiga.io/api/v1
  PROJECT_ID: 1704107
  CUSTOM_FIELD_ID: 56350
  TAIGA_USERNAME: gjhonic

jobs:
  link-to-taiga:
    runs-on: ubuntu-latest

    steps:
      - name: Extract userstory ref from PR title
        id: extract_ref
        run: |
          echo "PR_TITLE=${{ github.event.pull_request.title }}"
          if [[ "${{ github.event.pull_request.title }}" =~ RG-([0-9]+) ]]; then
            echo "USERSTORY_REF=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
            echo "Found userstory ref: ${BASH_REMATCH[1]}"
          else
            echo "Error: Cannot parse userstory ref from PR title" >&2
            exit 1
          fi

      - name: Get authentication token
        id: get_auth
        env:
          TAIGA_USERNAME: ${{ env.TAIGA_USERNAME }}
          TAIGA_PASSWORD: ${{ secrets.TAIGA_PASSWORD }}
          TAIGA_TOKEN: ${{ secrets.TAIGA_TOKEN }}
        run: |
          echo "=== Getting authentication token ==="
          
          # Try application token first
          if [ -n "$TAIGA_TOKEN" ]; then
            echo "Trying application token..."
            USER_RESPONSE=$(curl -s -X GET "$TAIGA_API/users/me" \
              -H "Authorization: Bearer $TAIGA_TOKEN")
          
            if echo "$USER_RESPONSE" | jq -e '.id' > /dev/null; then
              echo "✅ Application token works!"
              echo "TOKEN=$TAIGA_TOKEN" >> $GITHUB_OUTPUT
              echo "AUTH_METHOD=token" >> $GITHUB_OUTPUT
              return 0
            else
              echo "❌ Application token failed: $USER_RESPONSE"
            fi
          fi
          
          # Fallback to username/password
          echo "Trying username/password authentication..."
          AUTH_RESPONSE=$(curl -s -X POST "$TAIGA_API/auth" \
            -H "Content-Type: application/json" \
            -d '{"type":"normal","username":"'$TAIGA_USERNAME'","password":"'$TAIGA_PASSWORD'"}')
          
          AUTH_TOKEN=$(echo "$AUTH_RESPONSE" | jq -r '.auth_token')
          
          if [[ "$AUTH_TOKEN" != "null" && -n "$AUTH_TOKEN" ]]; then
            echo "✅ Username/password authentication successful!"
            echo "TOKEN=$AUTH_TOKEN" >> $GITHUB_OUTPUT
            echo "AUTH_METHOD=password" >> $GITHUB_OUTPUT
          else
            echo "❌ Both authentication methods failed"
            echo "Token response: $AUTH_RESPONSE" >&2
            exit 1
          fi

      - name: Get Userstory ID by ref
        id: get_userstory
        env:
          TAIGA_API: ${{ env.TAIGA_API }}
          PROJECT_ID: ${{ env.PROJECT_ID }}
        run: |
          USERSTORY_REF=${{ steps.extract_ref.outputs.USERSTORY_REF }}
          TOKEN=${{ steps.get_auth.outputs.TOKEN }}
          
          echo "Looking for userstory with ref: $USERSTORY_REF in project: $PROJECT_ID"
          echo "Using auth method: ${{ steps.get_auth.outputs.AUTH_METHOD }}"
          
          USERSTORY_RESPONSE=$(curl -s -X GET "$TAIGA_API/userstories?project=$PROJECT_ID&ref=$USERSTORY_REF" \
            -H "Authorization: Bearer $TOKEN")
          
          echo "Userstory response: $USERSTORY_RESPONSE"
          
          USERSTORY_ID=$(echo "$USERSTORY_RESPONSE" | jq '.[0].id')
          if [[ "$USERSTORY_ID" == "null" || -z "$USERSTORY_ID" ]]; then
            echo "Userstory not found with ref: $USERSTORY_REF" >&2
            echo "Available userstories in project:"
            curl -s -X GET "$TAIGA_API/userstories?project=$PROJECT_ID" \
              -H "Authorization: Bearer $TOKEN" | jq '.[] | {id: .id, ref: .ref, subject: .subject}'
            exit 1
          fi
          echo "userstory_id=$USERSTORY_ID" >> $GITHUB_OUTPUT
          echo "Found userstory ID: $USERSTORY_ID"

      - name: Update custom field with PR URL
        env:
          TAIGA_API: ${{ env.TAIGA_API }}
          CUSTOM_FIELD_ID: ${{ env.CUSTOM_FIELD_ID }}
        run: |
          USERSTORY_ID=${{ steps.get_userstory.outputs.userstory_id }}
          TOKEN=${{ steps.get_auth.outputs.TOKEN }}
          PR_URL=${{ github.event.pull_request.html_url }}

          echo "Updating userstory $USERSTORY_ID with PR URL: $PR_URL"
          echo "Custom field ID: $CUSTOM_FIELD_ID"
          echo "Auth method used: ${{ steps.get_auth.outputs.AUTH_METHOD }}"

          PATCH_DATA=$(jq -n --arg id "$CUSTOM_FIELD_ID" --arg url "$PR_URL" \
            '{attributes_values: {($id): $url}, version: 1}')

          echo "Patch data: $PATCH_DATA"

          RESPONSE=$(curl -s -X PATCH "$TAIGA_API/userstories/custom-attributes-values/$USERSTORY_ID" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TOKEN" \
            -d "$PATCH_DATA")

          echo "Update response: $RESPONSE"
          
          if echo "$RESPONSE" | jq -e '.id' > /dev/null; then
            echo "Successfully updated userstory with PR link"
          else
            echo "Failed to update userstory. Response: $RESPONSE" >&2
            exit 1
          fi